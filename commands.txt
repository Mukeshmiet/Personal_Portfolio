SETUP
    python -m venv venvport 
    pip install -r .\requirements.txt
    pip freeze > .\requirements.txt

CREATE WEB_APP

    >>django-admin startproject <project_name>
    >>> cd <project_name>

CREATE APP

    >>python manage.py startapp <app_name>
    -> Create app views in views.py
    -> Create app urls in urls.py
    -> Link app urls with project urls in urls.py

    >>python manage.py migrate
    -add your app in settings.py INSTALLED_APP
    >>python manage.py makemigrations <app_name>
    - create templates folder and its files

//////////////////////////////////  {{Templating}}  //////////////////////////////

   ///////////////////////////  {{Filters}}  //////////////////////////////////

        data={'first_name':'Mukesh', 'last_name': 'Kumar', 'some_list':[1,2,3,4,5], 'some_dict': {'inside_key': 'inside_val'}}
        ,context= data

        {{first_name}}:{{last_name}} -> Mukesh:Kumar
        {{some_list}} -> [1,2,3,4,5]
        {{some_list.2}} -> 3
        {{some_dict.inside_key}} -> inside_val

        {# This is a comment #}

        {{first_name | upper}} -> MUKESH    (upper,length,)  {| lower | upper}

Built-in filter reference (
    add
    addslashes
    capfirst
    center
    cut
    date
    default
    default_if_none
    dictsort
    dictsortreversed
    divisibleby
    escape
    escapejs
    filesizeformat
    first
    floatformat
    force_escape
    get_digit
    iriencode
    join
    json_script
    last
    length
    length_is
    linebreaks
    linebreaksbr
    linenumbers
    ljust
    lower
    make_list
    phone2numeric
    pluralize
    pprint
    random
    rjust
    safe
    safeseq
    slice
    slugify
    stringformat
    striptags
    time
    timesince
    timeuntil
    title
    truncatechars
    truncatechars_html
    truncatewords
    truncatewords_html
    unordered_list
    upper
    urlencode
    urlize
    urlizetrunc
    wordcount
    wordwrap
    yesno
)

/////////////////////////  {{Tags}} ///////////////////////////

    Built-in tag reference
        autoescape
        block
        comment
        csrf_token
        cycle
        debug
        extends
        filter
        firstof
        for
        for â€¦ empty
        if
        Boolean operators
        == operator
        != operator
        < operator
        > operator
        <= operator
        >= operator
        in operator
        not in operator
        is operator
        is not operator
        Filters
        Complex expressions
        ifchanged
        include
        load
        lorem
        now
        regroup
        Grouping on other properties
        resetcycle
        spaceless
        templatetag
        url
        verbatim
        widthratio
        with

    For loop................

        <ol>
        {% for val in some_list %}
            <li> {{val}} </li>
        {% endfor %}
        </ol>

    if cond................

        {% if first_name %}
            {{first_name}}
        {% endif %}

////////////////////////      {%page redirect%}      ////////////////////////////

    <a href="{% url '<app_name:<path_name>' %}">Learn more about Django</app_name:>

    in app urls.py

    app_name = '<app_name>'

    -give paths a unique name

////////////////////////     {% page template %}     ////////////////////////

    >>>>>>>base.html

    ---------
    {% block content %}
    {% endblock %}
    ---------

    >>>>>>>>index.html

    {% extends 'my_app:base.html' %}                           // {% extends '<app_name>:base.html' %}
    ----- base.html content-------
    {% block content %}
    ------- index.html page content  ------------
    {% endblock %}
    ----- base.html content-------

///////// DATABASE ////////////

    >> python manage.py migrate

        .makemigrations only make migrate file in apps

        .migrate runs all existing migration files in apps

        .sqlmigrate used to debug sql commends and to see running qsl commands

    -> add app name in settings.py from apps.py class name

    >> python manage.py makemigrations app_office

        Migrations for 'app_office':
        app_office\migrations\0001_initial.py
            - Create model Patient

    >> python manage.py sqlmigrate app_office 0001

        BEGIN;
        --
        -- Create model Patient
        --
        CREATE TABLE "app_office_patient" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "first_name" varchar(30) NOT NULL, "last_name" varchar(30) NOT NULL, "age" integer NOT NULL);
        COMMIT;

    >> python manage.py migrate

    CRUD operations

        CREATING DATA
                >>python manage.py shell

            object and <modelclass>.save()

                patient1 = Patient(first_name= 'fname1', last_name='lname1', age=20)
                patient1.save()
                ---------------------------------------------------------------------
                >>> from app_office.models import Patient 
                >>> patient1 = Patient(first_name= 'fname1', last_name='lname1', age=20)
                >>> patient1.age > 40
                False
                >>> patient1.age < 40  
                True
                >>> patient1.save() 

            <modelclass>.object.create()

                Patient.objects.create(first_name= 'fname2', last_name='lname2', age=22)
                ------------------------------------------------------------------------
                <Patient: Patient object (2)>

            <modelclass>.objects.bulk_create

                Patient.objects.bulk_create([
                    Patient(first_name= 'fname3', last_name='lname3', age=12),
                    Patient(first_name= 'fname4', last_name='lname4', age=32)
                ])
                ---------------------------------------------------------------

        READING DATA (django model manager)

            >>python manage.py shell

            .all()

                Patient.objects.all()
                    -----------------
                    <QuerySet [<Patient: Patient object (1)>, <Patient: Patient object (2)>]>
                Patient.objects.all()[1]
                    ---------------------
                    <Patient: Patient object (2)>
                
                *now i created str representation in Patient class and restarted the shell

                Patient.objects.all()[1]
                    --------------------- 
                    <Patient: Fname2 Lname2 is 22 yrs old.> 
                
                Patient.objects.all()
                    ------------------
                    <QuerySet [<Patient: Fname1 Lname1 is 20 yrs old.>, <Patient: Fname2 Lname2 is 22 yrs old.>]>

            .get()   // pk = 1 // age = 32 // last_name=Lname1

                >>> Patient.objects.get(pk=1)
                <Patient: Fname1 Lname1 is 20 yrs old.>
                >>> Patient.objects.get(pk=2) 
                <Patient: Fname2 Lname2 is 22 yrs old.>
                >>> Patient.objects.get(pk=3)
                <Patient: Fname3 Lname3 is 12 yrs old.>
                >>> Patient.objects.get(pk=4) 
                <Patient: Fname4 Lname4 is 32 yrs old.>
                >>> Patient.objects.get(pk=5) 
            
            -- QuerySets API reference in django docu.mnt  (data filtering methods)

            .filter()

                >>> Patient.objects.filter().all()
                <QuerySet [
                    <Patient: Fname1 Lname1 is 20 yrs old.>,
                    <Patient: Fname2 Lname2 is 22 yrs old.>,
                    <Patient: Fname3 Lname3 is 12 yrs old.>,
                    <Patient: Fname4 Lname4 is 32 yrs old.>
                    ]>
                
                >>> Patient.objects.filter(age=20).all()              
                <QuerySet [<Patient: Fname1 Lname1 is 20 yrs old.>]>
            
                ------------------------------------------------------

                >>> from django.db.models import Q 

                    >>> Patient.objects.filter(Q(age=20) & Q(last_name='Lname1')).all()
                    <QuerySet []>
                    >>> Patient.objects.filter(Q(age=20) | Q(last_name='Lname1')).all() 
                    <QuerySet [<Patient: Fname1 Lname1 is 20 yrs old.>]>

                -- Filed Lookups in django docu.mtn..
                
            .exclude()

        UPDATE DATA

            from django.core.validators import MinValueValidator, MinValueValidator

                age = models.IntegerField( validators=[MinValueValidator(8),MaxValueValidator(92)])
                hrate = models.IntegerField(default=60, validators=[MinValueValidator(52),MaxValueValidator(82)])

            >>>python manage.py makemigrations app_office

                Migrations for 'app_office':
                app_office\migrations\0002_patient_hrate_alter_patient_age.py
                    - Add field hrate to patient
                    - Alter field age on patient

                >>>python manage.py migrate

                    Operations to perform:
                    Apply all migrations: admin, app_office, auth, contenttypes, sessions
                    Running migrations:
                    Applying app_office.0002_patient_hrate_alter_patient_age... OK

            *to change value then just get() it in a variable then reassign new value, after that .save() it.

        DELETE DATA

            *to delete value then just get() it in a variable then use .delete() it.

    Data from DB to Templates

        1. create urls.py file in your app
        2. create views and link urls.py in project urls.py
        3. add sql in view and convert it into dict object
        4. create templates/app_office folders inside app and include it in project settings.py file
        5. then create patients.html inside templates folder
        6. use django jinja template in html

//////////////Django Admin access and configure interface ////////////////

    - only for DB operations and user login data changes

    01. created app_cars
    02. project level templates folder and base.html created
    03. app level templates/app_cars folders and html files created
    04. In app_cars:
        a. views functions created with render html pages
        b. urls.py file created and assign app_name and path name
    05. In project_admin:
        a. app urls.py linked with project urls.py using include
        b. in settings.py, app installed, and linked project level templates folder
    06. In base.html, block content created, header and footer added
    07. extends base.html in all app level html pages and also added block content
    08. created a app_car model and then run makemigrations app_cars then run migrate
    09. Add functionality to views connecting to model 
    10. Created html forms to send info. back to the views using action="" model="POST" and request.POST redirect(reverse())

    11. Create super user:
        >>python manage.py createsuperuser and then login on "admin/"

////////////////////////// Django Forms ///////////////////////////////

